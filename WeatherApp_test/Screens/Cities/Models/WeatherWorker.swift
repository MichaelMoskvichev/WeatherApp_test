//
//  WeatherWorker.swift
//  WeatherApp_test
//
//  Created by Миша Москвичев on 07.10.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WeatherWorkerDelegate {
    func didUpdateWeather(_ weatherWorker : WeatherWorker, weather : WeatherModel)
    
    func didFailWithError(error: Error)
}



struct WeatherWorker {
    let weatherURL = "https://api.openweathermap.org/data/2.5/weather?appid=7ba14c50eaddbc408c680e4bd409e509&units=metric"
    
    var delegate : WeatherWorkerDelegate?
    
    func fetchWeater(cityName : String) {
        let urlString = "\(weatherURL)&q=\(cityName)"
        performRequest(with: urlString)
    }
    
    func performRequest(with urlString : String){
        //1. Create URL
        if let url = URL(string: urlString) {
            //2. Create a URLSession
            let session = URLSession(configuration: .default)
            //3. Give the session a task
            let task = session.dataTask(with: url) { (data, response, error) in
                if error != nil {
                    self.delegate?.didFailWithError(error: error!)
                    return
                }
                
                if let safeData = data {
                    if let weather = self.parseJSON(safeData){
                        self.delegate?.didUpdateWeather(self, weather: weather)
                    }
                }
            }
            //4. Start the task
            task.resume()
        }
    }
    func parseJSON(_ weatherData: Data) -> WeatherModel? {
        let decoder = JSONDecoder()
        do {
            let decodedData = try decoder.decode(WeatherData.self, from: weatherData)
            let id = decodedData.weather[0].id
            let temp = decodedData.main.temp
            let cityId = decodedData.cityId
            print(cityId)
            let weather = WeatherModel(conditionId: id, cityId: cityId, temperature: temp)
            return weather
            
        } catch {
            delegate?.didFailWithError(error: error)
            return nil
        }
    }
}




